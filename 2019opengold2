#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int N, K;
vector<ll> dist(7501, 2019201997), vis(7501, 0);

int main(){
	ifstream fin("walk.in");
	ofstream fout("walk.out");
	fin>>N>>K;
	for(int i = 0; i < N; i++){ //N nodes in mst
		int m = 0;
		for(int j = 1; j <= N; j++){ //pick the next smallest edge
			if(!vis[j] && (!m || dist[j] < dist[m])){
				m = j;
			}
		}
		vis[m] = 1;
		for(int k = 1; k <= N; k++){ //go through children of cur smallest node
			if(!vis[k])
				dist[k] = min(dist[k], ((2019201913*(ll)min(m,k))%2019201997 + (2019201949*(ll)max(k,m))%2019201997)%2019201997);
		}
	}
	sort(dist.begin()+2, dist.begin()+N+1);
	fout<<dist[N-K+2]<<endl;	
	return 0;
}
/*
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int N, K, groups;
vector<pair<ll, pair<int,int>>> v;
vector<int> par(7501), depth(7501, 1);

bool comp(pair<ll,pair<int,int>> a, pair<ll,pair<int,int>> b){
	return a.first < b.first;
}
int f(int x){
	if(par[x] == x) return x;
	return par[x] = f(par[x]);
}
void u(int x, int y){
	int x1 = f(x);
	int y1 = f(y);
	if(x1 == y1) return;
	if(depth[x1] > depth[y1]){
		par[y1] = x1;
	}
	else if(depth[x1] < depth[y1]){
		par[x1] = y1;
	}
	else{
		par[x1] = y1;
		depth[y1]++;
	}
	groups--;
	return;
}

int main(){
	ifstream fin("walk.in");
	ofstream fout("walk.out");
	fin>>N>>K;
	for(int i = 1; i <= N; i++)
		for(int j = i+1; j <= N; j++)
			v.push_back({((2019201913*(ll)i)%2019201997 + (2019201949*(ll)j)%2019201997)%2019201997, {i, j}});
	sort(v.begin(), v.end(), comp);
	for(int i = 1; i <= N; i++) par[i] = i;
	groups = N;
	ll ans = -1;
	for(int i = 0; i < v.size(); i++){
		if(groups == K-1){
			ans = v[i-1].first;
			break;
		}
		u(v[i].second.first, v[i].second.second);
	}
	fout<<ans<<endl;
	return 0;
}
*/

#include <bits/stdc++.h>
using namespace std;
const int maxn = 100000;
const int m = 1e9+7;

int N, K;
vector<vector<int>> adj(maxn+2);
int dp[maxn+2][3];
int co[maxn+2];

void solve(int curn, int prev){
	if(adj[curn].size() == 1 && curn != 1){ //leaf node
		if(co[curn] > -1){
			dp[curn][co[curn]] = 1;
		}
		else{
			dp[curn][0] = dp[curn][1] = dp[curn][2] = 1;
		}
		return;
	}
	for(auto it : adj[curn]){
		if(it == prev) continue;
		solve(it, curn);
	}
	for(int c = 0; c < 3; c++){
		if(co[curn] > -1 && c != co[curn]){
			dp[curn][c] = 0;
			continue;
		}			
		long long total = 1;
		for(auto it : adj[curn]){
			if(it == prev) continue;
			total *= (dp[it][(c+1)%3]%m + dp[it][(c+2)%3]%m) % m;
			total %= m;
		}
		dp[curn][c] = total % m;
	}
}

int main(){
	ifstream fin("barnpainting.in");
	ofstream fout("barnpainting.out");
	fin>>N>>K;
	memset(dp, 0, sizeof(dp));
	memset(co, -1, sizeof(co));
	for(int i = 0; i < N-1; i++){ int x, y; fin>>x>>y; adj[x].push_back(y); adj[y].push_back(x); }
	for(int i = 0; i < K; i++){ int b, c; fin>>b>>c; co[b] = c-1; }
	solve(1, 0);
	fout<<(dp[1][0] + dp[1][1] + dp[1][2]) % m<<endl;
	return 0;
}
	
		
	
